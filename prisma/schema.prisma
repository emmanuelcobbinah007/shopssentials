// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SizingType {
  Clothing
  FootwearInfants
  FootwearToddlers
  FootwearChildren
  Diapers
  NA
}

enum UserRole {
  ADMIN
  USER
  SUPERADMIN
}

enum Storefront {
  LORACE
  LYLA  
  SHOPSSENTIALS
  ThreeLs
  ALL
}

model User {
  id        String    @id @default(uuid()) @db.Uuid
  firstname String
  lastname  String
  email     String
  phone     String
  password  String
  role      UserRole    @default(USER)
  storefront Storefront? @default(LORACE)
  emailIsVerified        Boolean  @default(false)
  emailVerificationToken String?
  phoneIsVerified        Boolean  @default(false)
  phoneVerificationToken String?
  passwordResetToken     String?
  passwordResetTokenExpiry DateTime?
  createdAt DateTime  @default(now())
  carts      Cart[]
  orders    Order[]
  emailList EmailList[]

  @@unique([email, storefront]) 
}

model Category {
  id        String    @id @default(uuid()) @db.Uuid
  name      String
  products  Product[]
  storefront       Storefront?     @default(LORACE)
  subCategories SubCategory[]
  createdAt DateTime  @default(now())
  @@unique([name, storefront])
}

model SubCategory {
  id          String      @id @default(uuid()) @db.Uuid
  name        String
  isHidden    Boolean     @default(false)
  storefront  Storefront? @default(LORACE)
  categoryId  String      @db.Uuid
  category    Category    @relation(fields: [categoryId], references: [id])
  products    Product[] 
  createdAt   DateTime    @default(now())

  @@unique([name, categoryId, storefront]) 
}

model Product {
  id               String         @id @default(uuid()) @db.Uuid
  name             String
  descriptionShort String
  descriptionLong  String
  price            Float
  stock            Int
  isHidden         Boolean        @default(false)
  sizingType       SizingType
  storefront       Storefront?    @default(LORACE)
  categoryId       String         @db.Uuid
  category         Category       @relation(fields: [categoryId], references: [id])
  subCategoryId    String?        @db.Uuid
  subCategory      SubCategory?   @relation(fields: [subCategoryId], references: [id])
  featuredProduct  FeaturedProduct?
  cartItems        CartItem[]
  orderItems       OrderItem[]
  salePercent      Float          @default(0.0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  images           ProductImage[]
}

model ProductImage {
  id        String   @id @default(uuid()) @db.Uuid
  url       String
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.Uuid
}

model EmailList {
  id          String     @id @default(uuid()) @db.Uuid
  email       String
  storefront  Storefront? @default(LORACE)
  userId      String?    @db.Uuid
  user        User?      @relation(fields: [userId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([email, storefront])
}

model FeaturedProduct {
  id            String      @id @default(uuid()) @db.Uuid
  productId     String      @unique @db.Uuid
  storefront    Storefront? @default(LORACE)
  product       Product     @relation(fields: [productId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Cart {
  id          String      @id @default(uuid()) @db.Uuid
  userId      String      @db.Uuid
  storefront  Storefront? @default(LORACE)
  user        User        @relation(fields: [userId], references: [id])
  cartItems   CartItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([userId, storefront])
}

model CartItem {
  id          String    @id @default(uuid()) @db.Uuid
  quantity    Int       @default(1)
  size        String?   
  cartId      String    @db.Uuid
  cart        Cart      @relation(fields: [cartId], references: [id])
  productId   String    @db.Uuid
  product     Product   @relation(fields: [productId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          String      @id @default(uuid()) @db.Uuid
  isCompleted Boolean     @default(false)
  storefront  Storefront? @default(LORACE)
  orderItems  OrderItem[]
  userId      String      @db.Uuid
  user        User        @relation(fields: [userId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id          String    @id @default(uuid()) @db.Uuid
  quantity    Int       @default(1)
  size        String?   
  orderId     String    @db.Uuid
  order       Order     @relation(fields: [orderId], references: [id])
  productId   String    @db.Uuid
  product     Product   @relation(fields: [productId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt DateTime @updatedAt
}